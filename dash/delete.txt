To implement a universal delete view in Django, you can create a generic view that handles the deletion of any model instance. Here's how you can do it:
Steps:

    Create a Universal Delete View
        Use Django’s ContentType framework to dynamically fetch models.
        Ensure proper validation and permissions before deletion.

    Define URL Parameters for the Target Model and Object
        Accept the app name, model name, and object ID as URL parameters.

    Use the Generic get_object_or_404 for Fetching Instances
        Dynamically resolve the model and fetch the instance based on the given parameters.

    Add Confirmation Logic (Optional)
        You can display a confirmation page before deletion.

    Secure the View
        Implement permissions to restrict deletion to authorized users.

Implementation:

Here’s a Django universal delete view:
View Code:

from django.shortcuts import get_object_or_404, redirect, render
from django.contrib.contenttypes.models import ContentType
from django.contrib import messages
from django.http import HttpResponseForbidden
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator

@method_decorator(login_required, name='dispatch')
def universal_delete_view(request, app_label, model_name, object_id):
    """
    Universal delete view for any model.
    Parameters:
        app_label: The name of the app (e.g., 'shop').
        model_name: The name of the model (e.g., 'Product').
        object_id: The ID of the object to delete.
    """
    try:
        # Get the model class
        content_type = ContentType.objects.get(app_label=app_label, model=model_name.lower())
        model = content_type.model_class()
        
        # Get the object instance
        obj = get_object_or_404(model, id=object_id)

        # Check user permissions (Optional: Customize this logic)
        if not request.user.is_superuser and hasattr(obj, 'shop'):
            if obj.shop != request.user.profile.shop:
                return HttpResponseForbidden("You do not have permission to delete this item.")
        
        if request.method == 'POST':
            obj.delete()
            messages.success(request, f"{model_name} with ID {object_id} has been deleted.")
            return redirect('dashboard')  # Adjust redirection as needed
        
        # Optional: Render a confirmation page
        context = {'object': obj, 'model_name': model_name}
        return render(request, 'confirm_delete.html', context)

    except ContentType.DoesNotExist:
        messages.error(request, "Invalid model type.")
        return redirect('dashboard')  # Adjust redirection as needed

Confirmation Template (confirm_delete.html):

{% extends "base.html" %}

{% block content %}
<h2>Confirm Deletion</h2>
<p>Are you sure you want to delete this {{ model_name }}: "{{ object }}"?</p>

<form method="post">
    {% csrf_token %}
    <button type="submit" class="btn btn-danger">Delete</button>
    <a href="{% url 'dashboard' %}" class="btn btn-secondary">Cancel</a>
</form>
{% endblock %}

URL Configuration:

Add the URL pattern for the universal delete view:

from django.urls import path
from .views import universal_delete_view

urlpatterns = [
    # Other URLs...
    path('delete/<str:app_label>/<str:model_name>/<int:object_id>/', universal_delete_view, name='universal_delete'),
]

Key Points:

    Permissions: Validate the user's permissions to ensure secure deletion.
    CSRF Protection: Always use csrf_token in the form to protect against CSRF attacks.
    Custom Redirection: Modify the redirection logic based on your app's structure.
    Confirmation: Include a confirmation page to prevent accidental deletions.

Advantages:

    Reusability: One view handles deletions across the entire project.
    Extensibility: Easy to add custom checks for specific models or objects.
    Centralized Logic: Simplifies management and ensures consistent behavior.

Follow-Up Suggestions:

a. Add logging to track deletion operations for auditing purposes.
b. Extend the view to support soft deletions (e.g., setting an is_deleted flag instead of actual deletion).
