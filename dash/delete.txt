1. URL Configuration

Define the URL pattern in your urls.py file:

from django.urls import path
from . import views

urlpatterns = [
    path(
        'delete/<str:app_label>/<str:model_name>/<int:object_id>/',
        views.delete_view,
        name='dash_delete'
    ),
]

2. View

Define the delete_view in your views.py. This view handles dynamic deletion based on the app label, model name, and object ID.

from django.apps import apps
from django.shortcuts import get_object_or_404, redirect
from django.http import HttpResponseForbidden

def delete_view(request, app_label, model_name, object_id):
    """
    Deletes an object dynamically based on app label, model name, and object ID.
    """
    # Fetch the model class dynamically
    model = apps.get_model(app_label, model_name)
    if not model:
        return HttpResponseForbidden("Invalid model")

    # Fetch the object
    obj = get_object_or_404(model, pk=object_id)

    # Perform delete only if the method is POST for safety
    if request.method == "POST":
        obj.delete()
        return redirect('your_success_url')  # Change this to your redirect URL

    # Render a confirmation page if the method is GET
    return render(request, 'confirm_delete.html', {'object': obj})

3. Template for the Delete Link

In your HTML template, use the url tag to construct the delete URL dynamically.

<a href="{% url 'dash_delete' app_label=model._meta.app_label model_name=model._meta.model_name object_id=deal.id %}">
    <small>Delete</small>
</a>

Make sure model and deal are passed in the template context.
4. Template for Confirmation

Create a confirm_delete.html template for displaying a confirmation message before deleting.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Confirm Delete</title>
</head>
<body>
    <h1>Are you sure you want to delete "{{ object }}"?</h1>
    <form method="POST">
        {% csrf_token %}
        <button type="submit">Yes, delete</button>
        <a href="javascript:history.back()">Cancel</a>
    </form>
</body>
</html>

5. Context Setup in View

Pass the necessary context (e.g., model and deal) from your view rendering the template where the delete link is displayed.

from django.shortcuts import render
from .models import Deal  # Replace with your actual model

def deal_list_view(request):
    # Example context data
    deals = Deal.objects.all()
    model = Deal  # Your model class
    return render(request, 'deal_list.html', {'deals': deals, 'model': model})

6. Final Template Example

Assuming deal_list.html displays a list of Deal objects with delete links:

<ul>
    {% for deal in deals %}
        <li>
            {{ deal.name }}
            <a href="{% url 'dash_delete' app_label=model._meta.app_label model_name=model._meta.model_name object_id=deal.id %}">
                <small>Delete</small>
            </a>
        </li>
    {% endfor %}
</ul>

How It Works

    When the user clicks the delete link, they are directed to the delete_view.
    The delete_view checks if the request is a POST:
        If POST, it deletes the object and redirects the user.
        If GET, it renders a confirmation page.
    The app label and model name are passed dynamically in the URL.

a. Would you like me to help with setting up a test for this delete functionality?
b. Do you want to extend this example to include permissions (e.g., restrict who can delete objects)?


